(function (React$1, ReactDOM, ReactDropdown, d3) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;
  ReactDropdown = ReactDropdown && Object.prototype.hasOwnProperty.call(ReactDropdown, 'default') ? ReactDropdown['default'] : ReactDropdown;

  const csvUrl =
    'https://gist.githubusercontent.com/Biaaang/d04e5e92826a84a5f31ceb16a2c3321c/raw/81b536b6e5cf9ab93faa641ad193e53670fe75b3/college-majors.csv';

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = (d) => {
        d.Total = +d.Total;
        d.Men	= +d.Men;
        d.Women = +d.Women;
        d.ShareWomen = +d.ShareWomen;
        d.Employed = +d.Employed;
        d.Unemployment_rate = +d.Unemployment_rate;
        d.Median = +d.Median;
        d.Major = d.Major;
        d.Major_category = d.Major_category;
        return d;
      };
      d3.csv(csvUrl, row).then(setData);
    }, []);

    return data;
  };

  const AxisBottom = ({ xScale, innerHeight, tickFormat, tickOffset = 5}) =>
    xScale.ticks().map((tickValue) => (
      React.createElement( 'g', { className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)})` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, y: innerHeight + tickOffset, dy: ".70em" },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale, innerWidth, tickFormat, tickOffset = 8 }) =>
    yScale.ticks().map((tickValue) => (
      React.createElement( 'g', {
        className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -tickOffset, dy: ".3em" },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisSwap =  ({
    xValue,
    yValue,
    setXAttribute,
    setYAttribute,
  }) => (
    React.createElement( 'span', {
      className: "axis-swap", onMouseDown: () => {
        setXAttribute(yValue);
        setYAttribute(xValue);
      }, title: "swap axis to pivot graph" }, "â‡„")
  );

  const Marks = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    speciesValue,
    speciesScale,
    cicleRadius,
    markLabel
  }) =>
    data.map(d => (
      React.createElement( 'circle', {
        className: "mark", cx: xScale(xValue(d)), cy: yScale(yValue(d)), r: cicleRadius, fill: speciesScale(speciesValue(d)) }
      )
      
    ));

  const ColorLegend = ({
    colorScale,
    tickSpacing = 20,
    tickSize = 10,
    tickTextOffset = 20,
    fadeOpacity = 0.3,
    onHover,
    hoveredValue
  }) =>
    colorScale.domain().map((domainValue, i) => (
      React.createElement( 'g', {
        className: "tick", transform: `translate(0,${i * tickSpacing})`, onMouseEnter: () => onHover(domainValue), onMouseOut: () => onHover(null), opacity: hoveredValue && domainValue !== hoveredValue ? fadeOpacity : 1 },
        React.createElement( 'circle', { r: tickSize, fill: colorScale(domainValue) }),
        React.createElement( 'text', { x: tickTextOffset, dy: ".32em" },
          domainValue
        )
      )
    ));

  const width = 900;
  const height = 350;
  const margin = { top: 20, right: 305, bottom: 80, left: 90 };
  const xAxisLabelOffset = 50;
  const yAxisLabelOffset = 60;
  const circleRadius = 6;
  const fadeOpacity = 0.3;


  const xValue = d => d.Total;
  console.log(xValue);

  const attributes = [
    { value: 'Total', label: 'Total' },
    { value: 'Men', label: 'Men' },
    { value: 'Women', label: 'Women' },
    { value: 'ShareWomen', label: 'ShareWomen'},
    { value: 'Employed', label: 'Employed'},
    { value: 'Unemployment_rate', label: 'Unemployment_rate'},
    { value: 'Median', label:'Median'}
  ];

  const getLabel = value => {
    for(let i = 0; i < attributes.length; i++){
      if(attributes[i].value === value){
        return attributes[i].label;
      }
    }
  };

  const App = () => {
    const data = useData();
    const [hoveredValue, sethoveredValue] = React$1.useState(null);
    console.log(hoveredValue);
    
    const initialXAttribute = 'Total';
    const [xAttribute, setXAttribute] = React$1.useState(initialXAttribute);
    const xAxisLabel = getLabel(xAttribute);
    const xValue = (d) => d[xAttribute];
    
    const initialYAttribute = 'Median';
    const [yAttribute, setYAttribute] = React$1.useState(initialYAttribute);
    const yAxisLabel = getLabel(yAttribute);
    const yValue = (d) => d[yAttribute];
    
    if (!data) {
      return React$1__default.createElement( 'pre', null, "'Loading...'" );
    }
    
    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;

    const siFormat = d3.format('.2s');
    const tickFormat = (tickValue) => siFormat(tickValue).replace('G', 'B');
    const tooltipFormat =  d3.format(',d');
    
    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth])
    	.nice();
    
    const yScale = d3.scaleLinear()
      .domain(d3.extent(data, yValue))
      .range([innerHeight, 0])
    	.nice();
    
    const colorLegendLabel = "Major_category";
    const speciesValue = (d) => d.Major_category;
    const speciesScale = d3.scaleOrdinal()
    	.domain(data.map(speciesValue))
      .range([ "#488f31", "#89bf77", "#fff18f", "#f59b56", "#de425b", "#00d9e9", "#03dab7", "#72d472", "#bac42b", "ffa600" ]);

    const filteredData = data.filter(d => hoveredValue === speciesValue(d));
    
    
    
    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { className: "menu" },
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "X"),
          React$1__default.createElement( ReactDropdown, {
            id: "x-select", options: attributes, value: xAttribute, onChange: ({value}) => setXAttribute(value) }),
          React$1__default.createElement( AxisSwap, {
            xValue: xAttribute, yValue: yAttribute, setXAttribute: (value) => setXAttribute(value), setYAttribute: (value) => setYAttribute(value) }),
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "Y"),
          React$1__default.createElement( ReactDropdown, {
            id: "y-select", options: attributes, value: yAttribute, onChange: ({value}) => setYAttribute(value) })
        ),
        React$1__default.createElement( 'svg', { width: width, height: height, className: "ok" },
          React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
            React$1__default.createElement( AxisLeft, {
              yScale: yScale, innerWidth: innerWidth, tickFormat: tickFormat, tickOffset: 10 }),
            React$1__default.createElement( 'text', {
              className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},${innerHeight / 2}) rotate(-90)` },
              yAxisLabel
            ),
            React$1__default.createElement( AxisBottom, {
              xScale: xScale, innerHeight: innerHeight, tickFormat: tickFormat, tickOffset: 10 }),
            React$1__default.createElement( 'text', {
              className: "axis-label", textAnchor: "middle", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset },
              xAxisLabel
            ),
            React$1__default.createElement( 'g', { transform: `translate(${innerWidth + 40}, 54)` },
              React$1__default.createElement( 'text', {
                x: 90, y: -30, className: "legend-label", textAnchor: "middle" },
                colorLegendLabel
              ),
              React$1__default.createElement( ColorLegend, {
                colorScale: speciesScale, tickSpacing: 30, tickSize: circleRadius, fadeOpacity: fadeOpacity, onHover: sethoveredValue, hoveredValue: hoveredValue })
            ),
            React$1__default.createElement( 'g', { opacity: hoveredValue ? fadeOpacity : 1 },
              React$1__default.createElement( Marks, {
                data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, speciesValue: speciesValue, speciesScale: speciesScale, cicleRadius: circleRadius })
            ),
            React$1__default.createElement( Marks, {
              data: filteredData, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, speciesValue: speciesValue, speciesScale: speciesScale, cicleRadius: circleRadius })
          )
        )
      )
    );
  };

  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, ReactDropdown, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,